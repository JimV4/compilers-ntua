State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On T_fun shift to state 1
-- On program shift to state 42
-- On header shift to state 43
-- On func_def shift to state 153
## Reductions:

State 1:
## Known stack suffix:
## T_fun
## LR(1) items:
header -> T_fun . T_identifier T_left_par option(header_r) T_right_par T_colon ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_identifier shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## T_fun T_identifier
## LR(1) items:
header -> T_fun T_identifier . T_left_par option(header_r) T_right_par T_colon ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_left_par shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## T_fun T_identifier T_left_par
## LR(1) items:
header -> T_fun T_identifier T_left_par . option(header_r) T_right_par T_colon ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_ref shift to state 4
-- On option(header_r) shift to state 5
-- On option(T_ref) shift to state 13
-- On header_r shift to state 35
-- On fpar_def shift to state 36
## Reductions:
-- On T_identifier
--   reduce production option(T_ref) ->
-- On T_right_par
--   reduce production option(header_r) ->

State 4:
## Known stack suffix:
## T_ref
## LR(1) items:
option(T_ref) -> T_ref . [ T_identifier ]
## Transitions:
## Reductions:
-- On T_identifier
--   reduce production option(T_ref) -> T_ref

State 5:
## Known stack suffix:
## T_fun T_identifier T_left_par option(header_r)
## LR(1) items:
header -> T_fun T_identifier T_left_par option(header_r) . T_right_par T_colon ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_right_par shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## T_fun T_identifier T_left_par option(header_r) T_right_par
## LR(1) items:
header -> T_fun T_identifier T_left_par option(header_r) T_right_par . T_colon ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_colon shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## T_fun T_identifier T_left_par option(header_r) T_right_par T_colon
## LR(1) items:
header -> T_fun T_identifier T_left_par option(header_r) T_right_par T_colon . ret_type [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
-- On T_nothing shift to state 8
-- On T_int shift to state 9
-- On T_char shift to state 10
-- On ret_type shift to state 11
-- On data_type shift to state 12
## Reductions:

State 8:
## Known stack suffix:
## T_nothing
## LR(1) items:
ret_type -> T_nothing . [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_semicolon T_left_br T_fun
--   reduce production ret_type -> T_nothing

State 9:
## Known stack suffix:
## T_int
## LR(1) items:
data_type -> T_int . [ T_var T_semicolon T_right_par T_left_sqr T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_semicolon T_right_par T_left_sqr T_left_br T_fun
--   reduce production data_type -> T_int

State 10:
## Known stack suffix:
## T_char
## LR(1) items:
data_type -> T_char . [ T_var T_semicolon T_right_par T_left_sqr T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_semicolon T_right_par T_left_sqr T_left_br T_fun
--   reduce production data_type -> T_char

State 11:
## Known stack suffix:
## T_fun T_identifier T_left_par option(header_r) T_right_par T_colon ret_type
## LR(1) items:
header -> T_fun T_identifier T_left_par option(header_r) T_right_par T_colon ret_type . [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_semicolon T_left_br T_fun
--   reduce production header -> T_fun T_identifier T_left_par option(header_r) T_right_par T_colon ret_type

State 12:
## Known stack suffix:
## data_type
## LR(1) items:
ret_type -> data_type . [ T_var T_semicolon T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_semicolon T_left_br T_fun
--   reduce production ret_type -> data_type

State 13:
## Known stack suffix:
## option(T_ref)
## LR(1) items:
fpar_def -> option(T_ref) . T_identifier fpar_def_r T_colon fpar_type [ T_semicolon T_right_par ]
## Transitions:
-- On T_identifier shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## option(T_ref) T_identifier
## LR(1) items:
fpar_def -> option(T_ref) T_identifier . fpar_def_r T_colon fpar_type [ T_semicolon T_right_par ]
## Transitions:
-- On T_comma shift to state 15
-- On fpar_def_r shift to state 18
## Reductions:
-- On T_colon
--   reduce production fpar_def_r ->

State 15:
## Known stack suffix:
## T_comma
## LR(1) items:
fpar_def_r -> T_comma . T_identifier fpar_def_r [ T_colon ]
## Transitions:
-- On T_identifier shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## T_comma T_identifier
## LR(1) items:
fpar_def_r -> T_comma T_identifier . fpar_def_r [ T_colon ]
## Transitions:
-- On T_comma shift to state 15
-- On fpar_def_r shift to state 17
## Reductions:
-- On T_colon
--   reduce production fpar_def_r ->

State 17:
## Known stack suffix:
## T_comma T_identifier fpar_def_r
## LR(1) items:
fpar_def_r -> T_comma T_identifier fpar_def_r . [ T_colon ]
## Transitions:
## Reductions:
-- On T_colon
--   reduce production fpar_def_r -> T_comma T_identifier fpar_def_r

State 18:
## Known stack suffix:
## option(T_ref) T_identifier fpar_def_r
## LR(1) items:
fpar_def -> option(T_ref) T_identifier fpar_def_r . T_colon fpar_type [ T_semicolon T_right_par ]
## Transitions:
-- On T_colon shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## option(T_ref) T_identifier fpar_def_r T_colon
## LR(1) items:
fpar_def -> option(T_ref) T_identifier fpar_def_r T_colon . fpar_type [ T_semicolon T_right_par ]
## Transitions:
-- On T_int shift to state 9
-- On T_char shift to state 10
-- On fpar_type shift to state 20
-- On data_type shift to state 21
## Reductions:

State 20:
## Known stack suffix:
## option(T_ref) T_identifier fpar_def_r T_colon fpar_type
## LR(1) items:
fpar_def -> option(T_ref) T_identifier fpar_def_r T_colon fpar_type . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_def -> option(T_ref) T_identifier fpar_def_r T_colon fpar_type

State 21:
## Known stack suffix:
## data_type
## LR(1) items:
fpar_type -> data_type . option(fpar_type_r) [ T_semicolon T_right_par ]
## Transitions:
-- On T_left_sqr shift to state 22
-- On option(fpar_type_r) shift to state 33
-- On fpar_type_r shift to state 34
## Reductions:
-- On T_semicolon T_right_par
--   reduce production option(fpar_type_r) ->

State 22:
## Known stack suffix:
## T_left_sqr
## LR(1) items:
fpar_type_r -> T_left_sqr . option(T_right_sqr) fpar_type_rr [ T_semicolon T_right_par ]
## Transitions:
-- On T_right_sqr shift to state 23
-- On option(T_right_sqr) shift to state 24
## Reductions:
-- On T_integer
--   reduce production option(T_right_sqr) ->

State 23:
## Known stack suffix:
## T_right_sqr
## LR(1) items:
option(T_right_sqr) -> T_right_sqr . [ T_integer ]
## Transitions:
## Reductions:
-- On T_integer
--   reduce production option(T_right_sqr) -> T_right_sqr

State 24:
## Known stack suffix:
## T_left_sqr option(T_right_sqr)
## LR(1) items:
fpar_type_r -> T_left_sqr option(T_right_sqr) . fpar_type_rr [ T_semicolon T_right_par ]
## Transitions:
-- On T_integer shift to state 25
-- On fpar_type_rr shift to state 32
## Reductions:

State 25:
## Known stack suffix:
## T_integer
## LR(1) items:
fpar_type_rr -> T_integer . T_right_sqr fpar_type_rrr [ T_semicolon T_right_par ]
## Transitions:
-- On T_right_sqr shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## T_integer T_right_sqr
## LR(1) items:
fpar_type_rr -> T_integer T_right_sqr . fpar_type_rrr [ T_semicolon T_right_par ]
## Transitions:
-- On T_left_sqr shift to state 27
-- On fpar_type_rrr shift to state 31
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type_rrr ->

State 27:
## Known stack suffix:
## T_left_sqr
## LR(1) items:
fpar_type_rrr -> T_left_sqr . T_integer T_right_sqr fpar_type_rrr [ T_semicolon T_right_par ]
## Transitions:
-- On T_integer shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## T_left_sqr T_integer
## LR(1) items:
fpar_type_rrr -> T_left_sqr T_integer . T_right_sqr fpar_type_rrr [ T_semicolon T_right_par ]
## Transitions:
-- On T_right_sqr shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## T_left_sqr T_integer T_right_sqr
## LR(1) items:
fpar_type_rrr -> T_left_sqr T_integer T_right_sqr . fpar_type_rrr [ T_semicolon T_right_par ]
## Transitions:
-- On T_left_sqr shift to state 27
-- On fpar_type_rrr shift to state 30
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type_rrr ->

State 30:
## Known stack suffix:
## T_left_sqr T_integer T_right_sqr fpar_type_rrr
## LR(1) items:
fpar_type_rrr -> T_left_sqr T_integer T_right_sqr fpar_type_rrr . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type_rrr -> T_left_sqr T_integer T_right_sqr fpar_type_rrr

State 31:
## Known stack suffix:
## T_integer T_right_sqr fpar_type_rrr
## LR(1) items:
fpar_type_rr -> T_integer T_right_sqr fpar_type_rrr . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type_rr -> T_integer T_right_sqr fpar_type_rrr

State 32:
## Known stack suffix:
## T_left_sqr option(T_right_sqr) fpar_type_rr
## LR(1) items:
fpar_type_r -> T_left_sqr option(T_right_sqr) fpar_type_rr . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type_r -> T_left_sqr option(T_right_sqr) fpar_type_rr

State 33:
## Known stack suffix:
## data_type option(fpar_type_r)
## LR(1) items:
fpar_type -> data_type option(fpar_type_r) . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production fpar_type -> data_type option(fpar_type_r)

State 34:
## Known stack suffix:
## fpar_type_r
## LR(1) items:
option(fpar_type_r) -> fpar_type_r . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production option(fpar_type_r) -> fpar_type_r

State 35:
## Known stack suffix:
## header_r
## LR(1) items:
option(header_r) -> header_r . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production option(header_r) -> header_r

State 36:
## Known stack suffix:
## fpar_def
## LR(1) items:
header_r -> fpar_def . list(header_rr) [ T_right_par ]
## Transitions:
-- On T_semicolon shift to state 37
-- On list(header_rr) shift to state 39
-- On header_rr shift to state 40
## Reductions:
-- On T_right_par
--   reduce production list(header_rr) ->

State 37:
## Known stack suffix:
## T_semicolon
## LR(1) items:
header_rr -> T_semicolon . fpar_def [ T_semicolon T_right_par ]
## Transitions:
-- On T_ref shift to state 4
-- On option(T_ref) shift to state 13
-- On fpar_def shift to state 38
## Reductions:
-- On T_identifier
--   reduce production option(T_ref) ->

State 38:
## Known stack suffix:
## T_semicolon fpar_def
## LR(1) items:
header_rr -> T_semicolon fpar_def . [ T_semicolon T_right_par ]
## Transitions:
## Reductions:
-- On T_semicolon T_right_par
--   reduce production header_rr -> T_semicolon fpar_def

State 39:
## Known stack suffix:
## fpar_def list(header_rr)
## LR(1) items:
header_r -> fpar_def list(header_rr) . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production header_r -> fpar_def list(header_rr)

State 40:
## Known stack suffix:
## header_rr
## LR(1) items:
list(header_rr) -> header_rr . list(header_rr) [ T_right_par ]
## Transitions:
-- On T_semicolon shift to state 37
-- On list(header_rr) shift to state 41
-- On header_rr shift to state 40
## Reductions:
-- On T_right_par
--   reduce production list(header_rr) ->

State 41:
## Known stack suffix:
## header_rr list(header_rr)
## LR(1) items:
list(header_rr) -> header_rr list(header_rr) . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production list(header_rr) -> header_rr list(header_rr)

State 42:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 43:
## Known stack suffix:
## header
## LR(1) items:
func_def -> header . list(local_def) block [ T_eof ]
## Transitions:
-- On T_var shift to state 44
-- On T_fun shift to state 1
-- On var_def shift to state 59
-- On local_def shift to state 60
-- On list(local_def) shift to state 64
-- On header shift to state 62
-- On func_def shift to state 151
-- On func_decl shift to state 152
## Reductions:
-- On T_left_br
--   reduce production list(local_def) ->

State 44:
## Known stack suffix:
## T_var
## LR(1) items:
var_def -> T_var . T_identifier var_def_r T_colon mytype T_semicolon [ T_var T_left_br T_fun ]
## Transitions:
-- On T_identifier shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## T_var T_identifier
## LR(1) items:
var_def -> T_var T_identifier . var_def_r T_colon mytype T_semicolon [ T_var T_left_br T_fun ]
## Transitions:
-- On T_comma shift to state 46
-- On var_def_r shift to state 49
## Reductions:
-- On T_colon
--   reduce production var_def_r ->

State 46:
## Known stack suffix:
## T_comma
## LR(1) items:
var_def_r -> T_comma . T_identifier var_def_r [ T_colon ]
## Transitions:
-- On T_identifier shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## T_comma T_identifier
## LR(1) items:
var_def_r -> T_comma T_identifier . var_def_r [ T_colon ]
## Transitions:
-- On T_comma shift to state 46
-- On var_def_r shift to state 48
## Reductions:
-- On T_colon
--   reduce production var_def_r ->

State 48:
## Known stack suffix:
## T_comma T_identifier var_def_r
## LR(1) items:
var_def_r -> T_comma T_identifier var_def_r . [ T_colon ]
## Transitions:
## Reductions:
-- On T_colon
--   reduce production var_def_r -> T_comma T_identifier var_def_r

State 49:
## Known stack suffix:
## T_var T_identifier var_def_r
## LR(1) items:
var_def -> T_var T_identifier var_def_r . T_colon mytype T_semicolon [ T_var T_left_br T_fun ]
## Transitions:
-- On T_colon shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## T_var T_identifier var_def_r T_colon
## LR(1) items:
var_def -> T_var T_identifier var_def_r T_colon . mytype T_semicolon [ T_var T_left_br T_fun ]
## Transitions:
-- On T_int shift to state 9
-- On T_char shift to state 10
-- On mytype shift to state 51
-- On data_type shift to state 53
## Reductions:

State 51:
## Known stack suffix:
## T_var T_identifier var_def_r T_colon mytype
## LR(1) items:
var_def -> T_var T_identifier var_def_r T_colon mytype . T_semicolon [ T_var T_left_br T_fun ]
## Transitions:
-- On T_semicolon shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## T_var T_identifier var_def_r T_colon mytype T_semicolon
## LR(1) items:
var_def -> T_var T_identifier var_def_r T_colon mytype T_semicolon . [ T_var T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun
--   reduce production var_def -> T_var T_identifier var_def_r T_colon mytype T_semicolon

State 53:
## Known stack suffix:
## data_type
## LR(1) items:
mytype -> data_type . mytype_r [ T_semicolon ]
## Transitions:
-- On T_left_sqr shift to state 54
-- On mytype_r shift to state 58
## Reductions:
-- On T_semicolon
--   reduce production mytype_r ->

State 54:
## Known stack suffix:
## T_left_sqr
## LR(1) items:
mytype_r -> T_left_sqr . T_integer T_right_sqr mytype_r [ T_semicolon ]
## Transitions:
-- On T_integer shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## T_left_sqr T_integer
## LR(1) items:
mytype_r -> T_left_sqr T_integer . T_right_sqr mytype_r [ T_semicolon ]
## Transitions:
-- On T_right_sqr shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## T_left_sqr T_integer T_right_sqr
## LR(1) items:
mytype_r -> T_left_sqr T_integer T_right_sqr . mytype_r [ T_semicolon ]
## Transitions:
-- On T_left_sqr shift to state 54
-- On mytype_r shift to state 57
## Reductions:
-- On T_semicolon
--   reduce production mytype_r ->

State 57:
## Known stack suffix:
## T_left_sqr T_integer T_right_sqr mytype_r
## LR(1) items:
mytype_r -> T_left_sqr T_integer T_right_sqr mytype_r . [ T_semicolon ]
## Transitions:
## Reductions:
-- On T_semicolon
--   reduce production mytype_r -> T_left_sqr T_integer T_right_sqr mytype_r

State 58:
## Known stack suffix:
## data_type mytype_r
## LR(1) items:
mytype -> data_type mytype_r . [ T_semicolon ]
## Transitions:
## Reductions:
-- On T_semicolon
--   reduce production mytype -> data_type mytype_r

State 59:
## Known stack suffix:
## var_def
## LR(1) items:
local_def -> var_def . [ T_var T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun
--   reduce production local_def -> var_def

State 60:
## Known stack suffix:
## local_def
## LR(1) items:
list(local_def) -> local_def . list(local_def) [ T_left_br ]
## Transitions:
-- On T_var shift to state 44
-- On T_fun shift to state 1
-- On var_def shift to state 59
-- On local_def shift to state 60
-- On list(local_def) shift to state 61
-- On header shift to state 62
-- On func_def shift to state 151
-- On func_decl shift to state 152
## Reductions:
-- On T_left_br
--   reduce production list(local_def) ->

State 61:
## Known stack suffix:
## local_def list(local_def)
## LR(1) items:
list(local_def) -> local_def list(local_def) . [ T_left_br ]
## Transitions:
## Reductions:
-- On T_left_br
--   reduce production list(local_def) -> local_def list(local_def)

State 62:
## Known stack suffix:
## header
## LR(1) items:
func_decl -> header . T_semicolon [ T_var T_left_br T_fun ]
func_def -> header . list(local_def) block [ T_var T_left_br T_fun ]
## Transitions:
-- On T_var shift to state 44
-- On T_semicolon shift to state 63
-- On T_fun shift to state 1
-- On var_def shift to state 59
-- On local_def shift to state 60
-- On list(local_def) shift to state 64
-- On header shift to state 62
-- On func_def shift to state 151
-- On func_decl shift to state 152
## Reductions:
-- On T_left_br
--   reduce production list(local_def) ->

State 63:
## Known stack suffix:
## header T_semicolon
## LR(1) items:
func_decl -> header T_semicolon . [ T_var T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun
--   reduce production func_decl -> header T_semicolon

State 64:
## Known stack suffix:
## header list(local_def)
## LR(1) items:
func_def -> header list(local_def) . block [ T_var T_left_br T_fun T_eof ]
## Transitions:
-- On T_left_br shift to state 65
-- On block shift to state 150
## Reductions:

State 65:
## Known stack suffix:
## T_left_br
## LR(1) items:
block -> T_left_br . list(stmt) T_right_br [ T_while T_var T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_fun T_eof T_else ]
## Transitions:
-- On T_while shift to state 66
-- On T_string shift to state 67
-- On T_semicolon shift to state 127
-- On T_return shift to state 128
-- On T_left_br shift to state 65
-- On T_if shift to state 132
-- On T_identifier shift to state 72
-- On stmt shift to state 146
-- On list(stmt) shift to state 148
-- On l_value shift to state 138
-- On func_call shift to state 142
-- On block shift to state 144
## Reductions:
-- On T_right_br
--   reduce production list(stmt) ->

State 66:
## Known stack suffix:
## T_while
## LR(1) items:
stmt -> T_while . cond T_do stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 120
-- On cond shift to state 125
## Reductions:

State 67:
## Known stack suffix:
## T_string
## LR(1) items:
l_value -> T_string . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and
--   reduce production l_value -> T_string

State 68:
## Known stack suffix:
## T_plus
## LR(1) items:
expr -> T_plus . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 101
## Reductions:

State 69:
## Known stack suffix:
## T_minus
## LR(1) items:
expr -> T_minus . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 100
## Reductions:

State 70:
## Known stack suffix:
## T_left_par
## LR(1) items:
expr -> T_left_par . expr T_right_par [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 98
## Reductions:

State 71:
## Known stack suffix:
## T_integer
## LR(1) items:
expr -> T_integer . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> T_integer

State 72:
## Known stack suffix:
## T_identifier
## LR(1) items:
func_call -> T_identifier . T_left_par option(func_call_rr) T_right_par [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
l_value -> T_identifier . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and ]
## Transitions:
-- On T_left_par shift to state 73
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and
--   reduce production l_value -> T_identifier

State 73:
## Known stack suffix:
## T_identifier T_left_par
## LR(1) items:
func_call -> T_identifier T_left_par . option(func_call_rr) T_right_par [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On option(func_call_rr) shift to state 75
-- On l_value shift to state 77
-- On func_call_rr shift to state 92
-- On func_call shift to state 79
-- On expr shift to state 93
## Reductions:
-- On T_right_par
--   reduce production option(func_call_rr) ->

State 74:
## Known stack suffix:
## T_chr
## LR(1) items:
expr -> T_chr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> T_chr

State 75:
## Known stack suffix:
## T_identifier T_left_par option(func_call_rr)
## LR(1) items:
func_call -> T_identifier T_left_par option(func_call_rr) . T_right_par [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_right_par shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## T_identifier T_left_par option(func_call_rr) T_right_par
## LR(1) items:
func_call -> T_identifier T_left_par option(func_call_rr) T_right_par . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production func_call -> T_identifier T_left_par option(func_call_rr) T_right_par

State 77:
## Known stack suffix:
## l_value
## LR(1) items:
expr -> l_value . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
l_value -> l_value . T_left_sqr expr T_right_sqr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_left_sqr shift to state 78
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> l_value

State 78:
## Known stack suffix:
## l_value T_left_sqr
## LR(1) items:
l_value -> l_value T_left_sqr . expr T_right_sqr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## func_call
## LR(1) items:
expr -> func_call . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> func_call

State 80:
## Known stack suffix:
## l_value T_left_sqr expr
## LR(1) items:
expr -> expr . T_plus expr [ T_right_sqr T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_minus expr [ T_right_sqr T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mul expr [ T_right_sqr T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_div expr [ T_right_sqr T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mod expr [ T_right_sqr T_plus T_mul T_mod T_minus T_div ]
l_value -> l_value T_left_sqr expr . T_right_sqr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and ]
## Transitions:
-- On T_right_sqr shift to state 81
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:

State 81:
## Known stack suffix:
## l_value T_left_sqr expr T_right_sqr
## LR(1) items:
l_value -> l_value T_left_sqr expr T_right_sqr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_left_sqr T_greater_eq T_greater T_equal T_do T_div T_comma T_assignment T_and
--   reduce production l_value -> l_value T_left_sqr expr T_right_sqr

State 82:
## Known stack suffix:
## expr T_plus
## LR(1) items:
expr -> expr T_plus . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## expr T_plus expr
## LR(1) items:
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr T_plus expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_div shift to state 88
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_comma T_and
--   reduce production expr -> expr T_plus expr

State 84:
## Known stack suffix:
## expr T_mul
## LR(1) items:
expr -> expr T_mul . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## expr T_mul expr
## LR(1) items:
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr T_mul expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> expr T_mul expr

State 86:
## Known stack suffix:
## expr T_mod
## LR(1) items:
expr -> expr T_mod . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## expr T_mod expr
## LR(1) items:
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr T_mod expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> expr T_mod expr

State 88:
## Known stack suffix:
## expr T_div
## LR(1) items:
expr -> expr T_div . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## expr T_div expr
## LR(1) items:
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr T_div expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> expr T_div expr

State 90:
## Known stack suffix:
## expr T_minus
## LR(1) items:
expr -> expr T_minus . expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## expr T_minus expr
## LR(1) items:
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr T_minus expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_div shift to state 88
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_comma T_and
--   reduce production expr -> expr T_minus expr

State 92:
## Known stack suffix:
## func_call_rr
## LR(1) items:
option(func_call_rr) -> func_call_rr . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production option(func_call_rr) -> func_call_rr

State 93:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . T_plus expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_minus expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_mul expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_div expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_mod expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
func_call_rr -> expr . func_call_r [ T_right_par ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
-- On T_comma shift to state 94
-- On func_call_r shift to state 97
## Reductions:
-- On T_right_par
--   reduce production func_call_r ->

State 94:
## Known stack suffix:
## T_comma
## LR(1) items:
func_call_r -> T_comma . expr func_call_r [ T_right_par ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## T_comma expr
## LR(1) items:
expr -> expr . T_plus expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_minus expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_mul expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_div expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
expr -> expr . T_mod expr [ T_right_par T_plus T_mul T_mod T_minus T_div T_comma ]
func_call_r -> T_comma expr . func_call_r [ T_right_par ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
-- On T_comma shift to state 94
-- On func_call_r shift to state 96
## Reductions:
-- On T_right_par
--   reduce production func_call_r ->

State 96:
## Known stack suffix:
## T_comma expr func_call_r
## LR(1) items:
func_call_r -> T_comma expr func_call_r . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production func_call_r -> T_comma expr func_call_r

State 97:
## Known stack suffix:
## expr func_call_r
## LR(1) items:
func_call_rr -> expr func_call_r . [ T_right_par ]
## Transitions:
## Reductions:
-- On T_right_par
--   reduce production func_call_rr -> expr func_call_r

State 98:
## Known stack suffix:
## T_left_par expr
## LR(1) items:
expr -> T_left_par expr . T_right_par [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_plus expr [ T_right_par T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_minus expr [ T_right_par T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mul expr [ T_right_par T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_div expr [ T_right_par T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mod expr [ T_right_par T_plus T_mul T_mod T_minus T_div ]
## Transitions:
-- On T_right_par shift to state 99
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:

State 99:
## Known stack suffix:
## T_left_par expr T_right_par
## LR(1) items:
expr -> T_left_par expr T_right_par . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and
--   reduce production expr -> T_left_par expr T_right_par

State 100:
## Known stack suffix:
## T_minus expr
## LR(1) items:
expr -> T_minus expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_div shift to state 88
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_comma T_and
--   reduce production expr -> T_minus expr

State 101:
## Known stack suffix:
## T_plus expr
## LR(1) items:
expr -> T_plus expr . [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_plus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_minus expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mul expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_div expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
expr -> expr . T_mod expr [ T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_div T_comma T_and ]
## Transitions:
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_div shift to state 88
## Reductions:
-- On T_then T_semicolon T_right_sqr T_right_par T_plus T_or T_not_equal T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_do T_comma T_and
--   reduce production expr -> T_plus expr

State 102:
## Known stack suffix:
## T_not
## LR(1) items:
cond -> T_not . cond [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 120
-- On cond shift to state 124
## Reductions:

State 103:
## Known stack suffix:
## T_left_par
## LR(1) items:
cond -> T_left_par . cond T_right_par [ T_then T_right_par T_or T_do T_and ]
expr -> T_left_par . expr T_right_par [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 104
-- On cond shift to state 117
## Reductions:

State 104:
## Known stack suffix:
## T_left_par expr
## LR(1) items:
cond -> expr . T_equal expr [ T_right_par T_or T_and ]
cond -> expr . T_not_equal expr [ T_right_par T_or T_and ]
cond -> expr . T_less expr [ T_right_par T_or T_and ]
cond -> expr . T_greater expr [ T_right_par T_or T_and ]
cond -> expr . T_less_eq expr [ T_right_par T_or T_and ]
cond -> expr . T_greater_eq expr [ T_right_par T_or T_and ]
expr -> T_left_par expr . T_right_par [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_plus expr [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_minus expr [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_mul expr [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_div expr [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_mod expr [ T_right_par T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
## Transitions:
-- On T_right_par shift to state 99
-- On T_plus shift to state 82
-- On T_not_equal shift to state 105
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_less_eq shift to state 107
-- On T_less shift to state 109
-- On T_greater_eq shift to state 111
-- On T_greater shift to state 113
-- On T_equal shift to state 115
-- On T_div shift to state 88
## Reductions:

State 105:
## Known stack suffix:
## expr T_not_equal
## LR(1) items:
cond -> expr T_not_equal . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## expr T_not_equal expr
## LR(1) items:
cond -> expr T_not_equal expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_not_equal expr

State 107:
## Known stack suffix:
## expr T_less_eq
## LR(1) items:
cond -> expr T_less_eq . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## expr T_less_eq expr
## LR(1) items:
cond -> expr T_less_eq expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_less_eq expr

State 109:
## Known stack suffix:
## expr T_less
## LR(1) items:
cond -> expr T_less . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## expr T_less expr
## LR(1) items:
cond -> expr T_less expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_less expr

State 111:
## Known stack suffix:
## expr T_greater_eq
## LR(1) items:
cond -> expr T_greater_eq . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## expr T_greater_eq expr
## LR(1) items:
cond -> expr T_greater_eq expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_greater_eq expr

State 113:
## Known stack suffix:
## expr T_greater
## LR(1) items:
cond -> expr T_greater . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## expr T_greater expr
## LR(1) items:
cond -> expr T_greater expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_greater expr

State 115:
## Known stack suffix:
## expr T_equal
## LR(1) items:
cond -> expr T_equal . expr [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## expr T_equal expr
## LR(1) items:
cond -> expr T_equal expr . [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_minus expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mul expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_div expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
expr -> expr . T_mod expr [ T_then T_right_par T_plus T_or T_mul T_mod T_minus T_do T_div T_and ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> expr T_equal expr

State 117:
## Known stack suffix:
## T_left_par cond
## LR(1) items:
cond -> T_left_par cond . T_right_par [ T_then T_right_par T_or T_do T_and ]
cond -> cond . T_and cond [ T_right_par T_or T_and ]
cond -> cond . T_or cond [ T_right_par T_or T_and ]
## Transitions:
-- On T_right_par shift to state 118
-- On T_or shift to state 119
-- On T_and shift to state 122
## Reductions:

State 118:
## Known stack suffix:
## T_left_par cond T_right_par
## LR(1) items:
cond -> T_left_par cond T_right_par . [ T_then T_right_par T_or T_do T_and ]
## Transitions:
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> T_left_par cond T_right_par

State 119:
## Known stack suffix:
## cond T_or
## LR(1) items:
cond -> cond T_or . cond [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 120
-- On cond shift to state 121
## Reductions:

State 120:
## Known stack suffix:
## expr
## LR(1) items:
cond -> expr . T_equal expr [ T_then T_right_par T_or T_do T_and ]
cond -> expr . T_not_equal expr [ T_then T_right_par T_or T_do T_and ]
cond -> expr . T_less expr [ T_then T_right_par T_or T_do T_and ]
cond -> expr . T_greater expr [ T_then T_right_par T_or T_do T_and ]
cond -> expr . T_less_eq expr [ T_then T_right_par T_or T_do T_and ]
cond -> expr . T_greater_eq expr [ T_then T_right_par T_or T_do T_and ]
expr -> expr . T_plus expr [ T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_minus expr [ T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_mul expr [ T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_div expr [ T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
expr -> expr . T_mod expr [ T_plus T_not_equal T_mul T_mod T_minus T_less_eq T_less T_greater_eq T_greater T_equal T_div ]
## Transitions:
-- On T_plus shift to state 82
-- On T_not_equal shift to state 105
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_less_eq shift to state 107
-- On T_less shift to state 109
-- On T_greater_eq shift to state 111
-- On T_greater shift to state 113
-- On T_equal shift to state 115
-- On T_div shift to state 88
## Reductions:

State 121:
## Known stack suffix:
## cond T_or cond
## LR(1) items:
cond -> cond . T_and cond [ T_then T_right_par T_or T_do T_and ]
cond -> cond . T_or cond [ T_then T_right_par T_or T_do T_and ]
cond -> cond T_or cond . [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_and shift to state 122
## Reductions:
-- On T_then T_right_par T_or T_do
--   reduce production cond -> cond T_or cond

State 122:
## Known stack suffix:
## cond T_and
## LR(1) items:
cond -> cond T_and . cond [ T_then T_right_par T_or T_do T_and ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 120
-- On cond shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## cond T_and cond
## LR(1) items:
cond -> cond . T_and cond [ T_then T_right_par T_or T_do T_and ]
cond -> cond T_and cond . [ T_then T_right_par T_or T_do T_and ]
cond -> cond . T_or cond [ T_then T_right_par T_or T_do T_and ]
## Transitions:
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> cond T_and cond

State 124:
## Known stack suffix:
## T_not cond
## LR(1) items:
cond -> T_not cond . [ T_then T_right_par T_or T_do T_and ]
cond -> cond . T_and cond [ T_then T_right_par T_or T_do T_and ]
cond -> cond . T_or cond [ T_then T_right_par T_or T_do T_and ]
## Transitions:
## Reductions:
-- On T_then T_right_par T_or T_do T_and
--   reduce production cond -> T_not cond

State 125:
## Known stack suffix:
## T_while cond
## LR(1) items:
cond -> cond . T_and cond [ T_or T_do T_and ]
cond -> cond . T_or cond [ T_or T_do T_and ]
stmt -> T_while cond . T_do stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_or shift to state 119
-- On T_do shift to state 126
-- On T_and shift to state 122
## Reductions:

State 126:
## Known stack suffix:
## T_while cond T_do
## LR(1) items:
stmt -> T_while cond T_do . stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_while shift to state 66
-- On T_string shift to state 67
-- On T_semicolon shift to state 127
-- On T_return shift to state 128
-- On T_left_br shift to state 65
-- On T_if shift to state 132
-- On T_identifier shift to state 72
-- On stmt shift to state 145
-- On l_value shift to state 138
-- On func_call shift to state 142
-- On block shift to state 144
## Reductions:

State 127:
## Known stack suffix:
## T_semicolon
## LR(1) items:
stmt -> T_semicolon . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> T_semicolon

State 128:
## Known stack suffix:
## T_return
## LR(1) items:
stmt -> T_return . option(expr) T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On option(expr) shift to state 129
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 131
## Reductions:
-- On T_semicolon
--   reduce production option(expr) ->

State 129:
## Known stack suffix:
## T_return option(expr)
## LR(1) items:
stmt -> T_return option(expr) . T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_semicolon shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## T_return option(expr) T_semicolon
## LR(1) items:
stmt -> T_return option(expr) T_semicolon . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> T_return option(expr) T_semicolon

State 131:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . T_plus expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_minus expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mul expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_div expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mod expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
option(expr) -> expr . [ T_semicolon ]
## Transitions:
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:
-- On T_semicolon
--   reduce production option(expr) -> expr

State 132:
## Known stack suffix:
## T_if
## LR(1) items:
stmt -> T_if . cond T_then stmt T_else stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
stmt -> T_if . cond T_then stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_not shift to state 102
-- On T_minus shift to state 69
-- On T_left_par shift to state 103
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 120
-- On cond shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## T_if cond
## LR(1) items:
cond -> cond . T_and cond [ T_then T_or T_and ]
cond -> cond . T_or cond [ T_then T_or T_and ]
stmt -> T_if cond . T_then stmt T_else stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
stmt -> T_if cond . T_then stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_then shift to state 134
-- On T_or shift to state 119
-- On T_and shift to state 122
## Reductions:

State 134:
## Known stack suffix:
## T_if cond T_then
## LR(1) items:
stmt -> T_if cond T_then . stmt T_else stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
stmt -> T_if cond T_then . stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_while shift to state 66
-- On T_string shift to state 67
-- On T_semicolon shift to state 127
-- On T_return shift to state 128
-- On T_left_br shift to state 65
-- On T_if shift to state 132
-- On T_identifier shift to state 72
-- On stmt shift to state 135
-- On l_value shift to state 138
-- On func_call shift to state 142
-- On block shift to state 144
## Reductions:

State 135:
## Known stack suffix:
## T_if cond T_then stmt
## LR(1) items:
stmt -> T_if cond T_then stmt . T_else stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
stmt -> T_if cond T_then stmt . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_else shift to state 136
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier
--   reduce production stmt -> T_if cond T_then stmt

State 136:
## Known stack suffix:
## T_if cond T_then stmt T_else
## LR(1) items:
stmt -> T_if cond T_then stmt T_else . stmt [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_while shift to state 66
-- On T_string shift to state 67
-- On T_semicolon shift to state 127
-- On T_return shift to state 128
-- On T_left_br shift to state 65
-- On T_if shift to state 132
-- On T_identifier shift to state 72
-- On stmt shift to state 137
-- On l_value shift to state 138
-- On func_call shift to state 142
-- On block shift to state 144
## Reductions:

State 137:
## Known stack suffix:
## T_if cond T_then stmt T_else stmt
## LR(1) items:
stmt -> T_if cond T_then stmt T_else stmt . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> T_if cond T_then stmt T_else stmt

State 138:
## Known stack suffix:
## l_value
## LR(1) items:
l_value -> l_value . T_left_sqr expr T_right_sqr [ T_left_sqr T_assignment ]
stmt -> l_value . T_assignment expr T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_left_sqr shift to state 78
-- On T_assignment shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## l_value T_assignment
## LR(1) items:
stmt -> l_value T_assignment . expr T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_string shift to state 67
-- On T_plus shift to state 68
-- On T_minus shift to state 69
-- On T_left_par shift to state 70
-- On T_integer shift to state 71
-- On T_identifier shift to state 72
-- On T_chr shift to state 74
-- On l_value shift to state 77
-- On func_call shift to state 79
-- On expr shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## l_value T_assignment expr
## LR(1) items:
expr -> expr . T_plus expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_minus expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mul expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_div expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
expr -> expr . T_mod expr [ T_semicolon T_plus T_mul T_mod T_minus T_div ]
stmt -> l_value T_assignment expr . T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_semicolon shift to state 141
-- On T_plus shift to state 82
-- On T_mul shift to state 84
-- On T_mod shift to state 86
-- On T_minus shift to state 90
-- On T_div shift to state 88
## Reductions:

State 141:
## Known stack suffix:
## l_value T_assignment expr T_semicolon
## LR(1) items:
stmt -> l_value T_assignment expr T_semicolon . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> l_value T_assignment expr T_semicolon

State 142:
## Known stack suffix:
## func_call
## LR(1) items:
stmt -> func_call . T_semicolon [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
-- On T_semicolon shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## func_call T_semicolon
## LR(1) items:
stmt -> func_call T_semicolon . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> func_call T_semicolon

State 144:
## Known stack suffix:
## block
## LR(1) items:
stmt -> block . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> block

State 145:
## Known stack suffix:
## T_while cond T_do stmt
## LR(1) items:
stmt -> T_while cond T_do stmt . [ T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else ]
## Transitions:
## Reductions:
-- On T_while T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_else
--   reduce production stmt -> T_while cond T_do stmt

State 146:
## Known stack suffix:
## stmt
## LR(1) items:
list(stmt) -> stmt . list(stmt) [ T_right_br ]
## Transitions:
-- On T_while shift to state 66
-- On T_string shift to state 67
-- On T_semicolon shift to state 127
-- On T_return shift to state 128
-- On T_left_br shift to state 65
-- On T_if shift to state 132
-- On T_identifier shift to state 72
-- On stmt shift to state 146
-- On list(stmt) shift to state 147
-- On l_value shift to state 138
-- On func_call shift to state 142
-- On block shift to state 144
## Reductions:
-- On T_right_br
--   reduce production list(stmt) ->

State 147:
## Known stack suffix:
## stmt list(stmt)
## LR(1) items:
list(stmt) -> stmt list(stmt) . [ T_right_br ]
## Transitions:
## Reductions:
-- On T_right_br
--   reduce production list(stmt) -> stmt list(stmt)

State 148:
## Known stack suffix:
## T_left_br list(stmt)
## LR(1) items:
block -> T_left_br list(stmt) . T_right_br [ T_while T_var T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_fun T_eof T_else ]
## Transitions:
-- On T_right_br shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## T_left_br list(stmt) T_right_br
## LR(1) items:
block -> T_left_br list(stmt) T_right_br . [ T_while T_var T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_fun T_eof T_else ]
## Transitions:
## Reductions:
-- On T_while T_var T_string T_semicolon T_right_br T_return T_left_br T_if T_identifier T_fun T_eof T_else
--   reduce production block -> T_left_br list(stmt) T_right_br

State 150:
## Known stack suffix:
## header list(local_def) block
## LR(1) items:
func_def -> header list(local_def) block . [ T_var T_left_br T_fun T_eof ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun T_eof
--   reduce production func_def -> header list(local_def) block

State 151:
## Known stack suffix:
## func_def
## LR(1) items:
local_def -> func_def . [ T_var T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun
--   reduce production local_def -> func_def

State 152:
## Known stack suffix:
## func_decl
## LR(1) items:
local_def -> func_decl . [ T_var T_left_br T_fun ]
## Transitions:
## Reductions:
-- On T_var T_left_br T_fun
--   reduce production local_def -> func_decl

State 153:
## Known stack suffix:
## func_def
## LR(1) items:
program -> func_def . T_eof [ # ]
## Transitions:
-- On T_eof shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## func_def T_eof
## LR(1) items:
program -> func_def T_eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> func_def T_eof

