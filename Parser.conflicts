
** Conflict (shift/reduce) in state 120.
** Tokens involved: T_or T_and
** The following explanations concentrate on token T_or.
** This state is reached from program after reading:

header list(local_def) T_left_br T_while T_not cond

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
func_def T_eof 
header list(local_def) block 
                       T_left_br list(stmt) T_right_br 
                                 stmt list(stmt) 
                                 T_while cond T_do stmt 
                                         (?)

** In state 120, looking ahead at T_or, reducing production
** cond -> T_not cond
** is permitted because of the following sub-derivation:

cond T_or cond // lookahead token appears
T_not cond . 

** In state 120, looking ahead at T_or, shifting is permitted
** because of the following sub-derivation:

T_not cond 
      cond . T_or cond 

** Conflict (shift/reduce) in state 21.
** Token involved: T_left_sqr
** This state is reached from program after reading:

T_fun T_identifier T_left_par option(T_ref) T_identifier fpar_def_r T_colon data_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
func_def T_eof 
header list(local_def) block 
T_fun T_identifier T_left_par option(header_r) T_right_par T_colon ret_type 
                              header_r 
                              fpar_def list(header_rr) 
                              option(T_ref) T_identifier fpar_def_r T_colon fpar_type 
                                                                            (?)

** In state 21, looking ahead at T_left_sqr, reducing production
** option(squares) ->
** is permitted because of the following sub-derivation:

data_type option(squares) fpar_type_r // lookahead token appears because fpar_type_r can begin with T_left_sqr
          . 

** In state 21, looking ahead at T_left_sqr, shifting is permitted
** because of the following sub-derivation:

data_type option(squares) fpar_type_r 
          squares 
          . T_left_sqr T_right_sqr 
